{"version":3,"sources":["components/ReadOnlyRow.js","components/EditableRow.js","App.js","index.js"],"names":["ReadOnlyRow","contact","handleEditClick","handleDeleteClick","month","itemName","unitPrice","unitsSold","netProfit","type","onClick","event","id","EditableRow","editFormData","handleEditFormChange","handleCancelClick","required","placeholder","name","value","onChange","headers","label","key","App","useState","data","contacts","setContacts","addFormData","setAddFormData","csvReport","filename","setEditFormData","editContactId","setEditContactId","handleAddFormChange","preventDefault","fieldName","target","getAttribute","fieldValue","newFormData","formValues","contactId","newContacts","index","findIndex","splice","className","onSubmit","editedContact","map","style","color","newContact","nanoid","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.36b938d6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst ReadOnlyRow = ({ contact, handleEditClick, handleDeleteClick }) => {\r\n  return (\r\n    <tr>\r\n      <td>{contact.month}</td>\r\n      <td>{contact.itemName}</td>\r\n      <td>{contact.unitPrice}</td>\r\n      <td>{contact.unitsSold}</td>\r\n      <td>{contact.netProfit}</td>\r\n\r\n      <td>\r\n        <button\r\n          type=\"button\"\r\n          onClick={(event) => handleEditClick(event, contact)}\r\n        >\r\n          Edit\r\n        </button>\r\n        <button type=\"button\" onClick={() => handleDeleteClick(contact.id)}>\r\n          Delete\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default ReadOnlyRow;\r\n","import React from \"react\";\r\n\r\nconst EditableRow = ({\r\n  editFormData,\r\n  handleEditFormChange,\r\n  handleCancelClick\r\n}) => {\r\n  return (\r\n    <tr>\r\n      <td>\r\n        <input\r\n          type=\"text\"\r\n          required=\"required\"\r\n          placeholder=\"Enter the month...\"\r\n          name=\"month\"\r\n          value={editFormData.month}\r\n          onChange={handleEditFormChange}\r\n        ></input>\r\n      </td>\r\n      <td>\r\n        <input\r\n          type=\"text\"\r\n          required=\"required\"\r\n          placeholder=\"Enter item name...\"\r\n          name=\"itemName\"\r\n          value={editFormData.itemName}\r\n          onChange={handleEditFormChange}\r\n        ></input>\r\n      </td>\r\n      <td>\r\n        <input\r\n          type=\"number\"\r\n          required=\"required\"\r\n          placeholder=\"Enter unit price...\"\r\n          name=\"unitPrice\"\r\n          value={editFormData.unitPrice}\r\n          onChange={handleEditFormChange}\r\n        ></input>\r\n      </td>\r\n      <td>\r\n        <input\r\n          type=\"number\"\r\n          required=\"required\"\r\n          placeholder=\"unitsSold...\"\r\n          name=\"unitsSold\"\r\n          value={editFormData.unitsSold}\r\n          onChange={handleEditFormChange}\r\n        ></input>\r\n      </td>\r\n      <td>\r\n        <input\r\n          type=\"number\"\r\n          required=\"required\"\r\n          placeholder=\"netProfit...\"\r\n          name=\"netProfit\"\r\n          value={editFormData.netProfit}\r\n          onChange={handleEditFormChange}\r\n        ></input>\r\n      </td>\r\n      <td>\r\n        <button type=\"submit\">Save</button>\r\n        <button type=\"button\" onClick={handleCancelClick}>\r\n          Cancel\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default EditableRow;\r\n","import React, { useState, Fragment } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport \"./App.css\";\nimport data from \"./mock-data.json\";\nimport ReadOnlyRow from \"./components/ReadOnlyRow\";\nimport EditableRow from \"./components/EditableRow\";\nimport { CSVLink } from \"react-csv\";\n\nconst headers = [\n  { label: \"Month\", key: \"month\" },\n  { label: \"Item Name\", key: \"itemName\" },\n  { label: \"Unit Price\", key: \"unitPrice\" },\n  { label: \"Units Sold\", key: \"unitsSold\" },\n  { label: \"Net Profit\", key: \"netProfit\" }\n];\n\nconst App = () => {\n  const [contacts, setContacts] = useState(data);\n  const [addFormData, setAddFormData] = useState({\n    month: \"\",\n    itemName: \"\",\n    unitPrice: \"\",\n    unitsSold: \"\",\n    netProfit: \"\"\n  });\n\n  const csvReport = {\n    filename: \"Report.csv\",\n    headers: headers,\n    data: contacts\n  };\n\n  const [editFormData, setEditFormData] = useState({\n    month: \"\",\n    itemName: \"\",\n    unitPrice: \"\",\n    unitsSold: \"\",\n    netProfit: \"\"\n  });\n\n  const [editContactId, setEditContactId] = useState(null);\n\n  const handleAddFormChange = (event) => {\n    event.preventDefault();\n\n    const fieldName = event.target.getAttribute(\"name\");\n    const fieldValue = event.target.value;\n\n    const newFormData = { ...addFormData };\n    newFormData[fieldName] = fieldValue;\n\n    setAddFormData(newFormData);\n  };\n\n  const handleEditFormChange = (event) => {\n    event.preventDefault();\n\n    const fieldName = event.target.getAttribute(\"name\");\n    const fieldValue = event.target.value;\n\n    const newFormData = { ...editFormData };\n    newFormData[fieldName] = fieldValue;\n\n    setEditFormData(newFormData);\n  };\n\n  const handleAddFormSubmit = (event) => {\n    event.preventDefault();\n\n    const newContact = {\n      id: nanoid(),\n      month: addFormData.month,\n      itemName: addFormData.itemName,\n      unitPrice: addFormData.unitPrice,\n      unitsSold: addFormData.unitsSold,\n      netProfit: addFormData.netProfit\n    };\n\n    const newContacts = [...contacts, newContact];\n    setContacts(newContacts);\n  };\n\n  const handleEditFormSubmit = (event) => {\n    event.preventDefault();\n\n    const editedContact = {\n      id: editContactId,\n      month: editFormData.month,\n      itemName: editFormData.itemName,\n      unitPrice: editFormData.unitPrice,\n      unitsSold: editFormData.unitsSold,\n      netProfit: editFormData.netProfit\n    };\n\n    const newContacts = [...contacts];\n\n    const index = contacts.findIndex((contact) => contact.id === editContactId);\n\n    newContacts[index] = editedContact;\n\n    setContacts(newContacts);\n    setEditContactId(null);\n  };\n\n  const handleEditClick = (event, contact) => {\n    event.preventDefault();\n    setEditContactId(contact.id);\n\n    const formValues = {\n      month: contact.month,\n      itemName: contact.itemName,\n      unitPrice: contact.unitPrice,\n      unitsSold: contact.unitsSold,\n      netProfit: contact.netProfit\n    };\n\n    setEditFormData(formValues);\n  };\n\n  const handleCancelClick = () => {\n    setEditContactId(null);\n  };\n\n  const handleDeleteClick = (contactId) => {\n    const newContacts = [...contacts];\n\n    const index = contacts.findIndex((contact) => contact.id === contactId);\n\n    newContacts.splice(index, 1);\n\n    setContacts(newContacts);\n  };\n\n  return (\n    <>\n      <div className=\"container \">\n        <h1>Balance Sheet</h1>\n        <div className=\"app-container\">\n          <form onSubmit={handleEditFormSubmit}>\n            <table>\n              <thead>\n                <tr>\n                  <th>Month</th>\n                  <th>Item Name</th>\n                  <th>Unit Price</th>\n                  <th>Units Sold</th>\n                  <th>Net Profit</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {contacts.map((contact) => (\n                  <Fragment>\n                    {editContactId === contact.id ? (\n                      <EditableRow\n                        editFormData={editFormData}\n                        handleEditFormChange={handleEditFormChange}\n                        handleCancelClick={handleCancelClick}\n                      />\n                    ) : (\n                      <ReadOnlyRow\n                        contact={contact}\n                        handleEditClick={handleEditClick}\n                        handleDeleteClick={handleDeleteClick}\n                      />\n                    )}\n                  </Fragment>\n                ))}\n              </tbody>\n            </table>\n          </form>\n          <h3>\n            <CSVLink {...csvReport} style={{ color: \"Black\" }}>\n              Click here to Export CSV File\n            </CSVLink>\n          </h3>\n          <h2>Add a new balance</h2>\n          <div>\n            <form onSubmit={handleAddFormSubmit}>\n              <input\n                type=\"text\"\n                name=\"month\"\n                required=\"required\"\n                placeholder=\"Enter month...\"\n                onChange={handleAddFormChange}\n              />\n              <input\n                type=\"text\"\n                name=\"itemName\"\n                required=\"required\"\n                placeholder=\"Enter item name...\"\n                onChange={handleAddFormChange}\n              />\n              <input\n                type=\"number\"\n                name=\"unitPrice\"\n                required=\"required\"\n                placeholder=\"Enter unit price of item...\"\n                onChange={handleAddFormChange}\n              />\n              <input\n                type=\"number\"\n                name=\"unitsSold\"\n                required=\"required\"\n                placeholder=\"Enter units sold...\"\n                onChange={handleAddFormChange}\n              />\n              <input\n                type=\"number\"\n                name=\"netProfit\"\n                required=\"required\"\n                placeholder=\"Enter net profit...\"\n                onChange={handleAddFormChange}\n              />\n              <button type=\"submit\">Add</button>\n            </form>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}